1	МЕТА РОБОТИ

Метою лабораторної роботи є розробка клієнтської програмної системи та написання звіту, в якому будуть висвітлені інженерні рішення, враховуючи його інтеграцію в систему та взаємодію з нею. В процесі виконання лабораторної роботи будуть створені чотири діаграми для кращого розуміння розроблених рішень: UML-діаграма взаємодії, UML-діаграма компонентів, UML-діаграма прецедентів та UML-діаграма станів.

2	КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

Для ефективної розробки клієнтської частини важливо детально описати всі необхідні елементи для реалізації певного функціоналу. Для досягнення цієї мети ідеально використовувати UML-діаграму прецедентів. Після ретельного аналізу функціонала, який був визначений у документі "Vision & Scope", було розроблено UML-діаграму прецедентів (див. рис. Б.1 у додатку Б). У визначеній UML-діаграмі прецедентів присутні п'ять акторів: гість, користувач, логіст, адміністратор та датчик. Кожен із цих акторів має доступ до раніше визначеного функціонала.  
Зокрема, користувач може вносити зміни до своєї особистої інформації, переглядати інформацію про доставку, створення замовлення на перевезення вантажу згідно з необхідними характеристиками, зокрема переглядати місцеперебування вантажу та історію його перевезення.
Гість має можливість зареєструватись, або авторизуватись у системі, але при цьому, він може тільки переглядати тарифи та інформацію про вантажоперевезення.
Логіст має можливість додавати, редагувати та видаляти інформацію про подорож, та розклад, знаходження найближчого контейнера. Також він має змогу формувати статистику за кількостю перевезеного вантажу та вагу перевезеного вантажу. Логіст має доступ до загального функціонала, який наявний у користувача.
Адміністратор має можливість внесення змін до будь-яких даних у базі даних та отримання необхідної інформації. Він має доступ до функціоналу, який доступний власнику та користувачу.
Після визначення акторів, потрібно пояснити, яким чином користувачі можуть отримати свою роль для цього було розроблено о UML діаграму станів ролі користувача (див.рис. 1). Для того, щоб отримати роль ‘‘Користувач’’ користувачу треба провести авторизація та реєстрацію, після чого дана роль буде автоматично додана. Для того щоб отримати роль ‘Адміністратор’, треба щоб інший користувач, який має дану роль додав користувачу. Останнім є роль ‘Логіст’, тобто це  користувач, який відповідає за прийняття замовлення, створення маршруту руху та відстежувати  вантаж під час перевезення Для того щоб отримати роль ‘Логіст’, треба щоб інший користувач, який має роль ‘Адміністратор’ додав користувачу. Наступним кроком була розроблена UML діаграма компонент (див. рис. 2), яка ілюструє взаємодію між ключовими компонентами програмної системи: клієнтською та серверною частинами. Ця діаграма надає докладну інформацію про основні компоненти, що знаходяться на стороні клієнта і відповідають за функціонування застосунку, враховуючи усі необхідні функціональні вимоги, які були визначені за допомогою UML діаграми прецедентів. 
Логіст  може створити рейс, розклад та відомість використовуючи кнопку на сторінці адміністрування логістики. Для адміністратора, сторінка також надає важливий функціонал, такий як перегляд користувачів, контейнерів, датчиків та інших сутностей, можливість резервного копіювання таблиць бази даних у форматі CSV. 
Ключовим компонентом  є кабінет, де користувач може отримати інформацію про вхідні та вихідні вантажі, відстеження місцеперебування, створити замовлення на доставку, редагувати власну інформацію, переглянути статистику. Цей компонент важливий для забезпечення користувачеві зручного способу взаємодії з системою, дозволяючи ефективно керувати перевезенням вантажів. Ця діаграма відображає компоненти, що відповідають за користувацький інтерфейс, обробку бізнес-логіки та взаємодію зовнішніми ресурсами та сервісами. Після визначення компонентів веб-додатка, розроблена діаграма діяльності користувача (див. рис. 3) надає уявлення про те, як користувачі можуть взаємодіяти з додатком.
По-перше, користувач має зареєструватися у додатку. Після цього він може переглядати інформацію про вхідні та вихідні вантажі та створити замовлення на перевезення. На сторінці доступних вантажів користувач зможе переглядати інформацію про актуальне місцеперебування вантажу, перевірити статус. 
Логіст може прийняти вантаж, до перевезення, переглянути інформацію про рейс, розклад та переглянути статистику.
Адміністратор має доступ, щоб переглянути  дані користувача та редагувати їх, створення резервних.
Такий підхід забезпечує послідовність дій користувача та надає зручний інтерфейс для взаємодії з функціоналом веб-додатку, забезпечуючи при цьому конфіденційність і безпеку інформації.
Після концептуального моделювання предметної області, клієнтський функціонал системи було формалізовано у вигляді чотирьох концептуальних моделей. На основі цих моделей можна переходити до етапу проектування архітектурних рішень та реалізації програмного забезпечення користувацького інтерфейсу. 

3	ІНЖЕНЕРНІ РІШЕННЯ
3.1 Структура та технології проєкту

В процесі розробки клієнтської частини веб-додатка, для виконання функціональних вимог та з урахуванням особистого досвіду, використовувався React разом з JavaScript. React відзначається фокусом на реактивному програмуванні для інтерфейсів користувача, при цьому не обмежуючи структуру всього додатку. Поєднання React та JavaScript дозволило отримати широкий функціонал та ефективність розробки веб-застосунків.
Для взаємодії з сервером та обміну даними була використана бібліотека Axios. Axios надає зручний і простий інтерфейс для виконання HTTP-запитів, що спрощує обробку асинхронних операцій та забезпечує ефективний обмін даними між клієнтом та сервером.
Для локалізації обрали бібліотеку "i18next", яка допомагає зробити додаток багатомовним. Вона дозволяє користувачам швидко перемикатися між мовами без перезавантаження сторінки. Це зручно і робить процес локалізації більш організованим і легким для підтримки в майбутньому. 
Для візуалізації та відображення графіків була використана бібліотека PieChart.js. Ця бібліотека дозволяє легко і красиво побудувати різноманітні графіки та діаграми в інтерфейсі користувача, що сприяє кращому розумінню даних. Інтеграція Chart.js дозволила створити візуально привабливий та інформативний інтерфейс для відображення статистики та інших даних у додатку.

3.2 Реалізація інтерфейсу користувача

Для отримання повного функціоналу додатка новий користувач повинен спочатку здійснити реєстрацію. Для цього йому достатньо натискати кнопку "Register" на навігаційній панелі (див. розділ А1 у додатку А). Після цього відкриється сторінка (див. рис. 4) з областями для введення даних. При введенні електронної пошти відбувається перевірка на правильність введених даних. Після успішної реєстрації користувач потрапляє на сторінку (див. рис. 5), де відображаються інформація про систему. Після авторизації користувач може потрапити до сторінки кабінет, де наявна статистика користувача, перегляд вхідних та вихідних вантажів та безпосереднє створення замовлення на перевезення (див. рис. 6). При натисканні кнопки ‘Вхідні вантажі’ користувач має сторінку з відображення вантажів та коротку інформацію про них, для детального ознайомлення необхідно обрати потрібний вантаж (див. рис. 7). На сторінці вантажу користувач може відстежити місцеперебування в реальному часі та переглянути повну інформацію про вантаж (див. рис. 8). При натисканні кнопки ‘Створити замовлення на перевезення’ користувач має сторінку з необхідними полями, які необхідно заповнити, для коректного створення вантажу (див.рис.9). Після створення замовлення, користувач може переглянути створений вантаж в розділі ‘Вихідні вантажі’, та відстежити його місцеперебування і його статус (див.рис.10). Користувач з роллю "Адміністратор" може здійснювати блокування, розблокування та редагування інформації користувачів на спеціальній сторінці (див. рис. 11-12). Додатково він може використовувати функцію пошуку за електронною поштою та номером елементу. Адміністратор має можливість робити копії даних, зокрема, копії таблиць, обираючи пункт ‘Створити резервну копію’. Крім того, як і користувач з роллю ‘Логіст’, адміністратор має право редагувати та видаляти вантажі, користувачів, датчики та контейнера, водіїв та автомобілі (див. розділ А2 у додатку А). Користувач з роллю "Логіст" може здійснювати пошук найближчих контейнерів від зони завантаження, для цього потрібно передати місце завантаження (див. рис. 12). Додатково користувач може переглянути номер контейнера та відстань від зони завантаження до фактичного місця перебування контейнера. На цій й ж сторінці логіст має список вантажів, які необхідно опрацювати, а саме створити рейс, розклад, та відомість, після чого призначити необхідну відомість вантажу, після чого вантаж зникне з списку (див. рис. 13-14). Також логіст може переглянути необхідну статистику (див. розділ А3 у додатку А), а саме статистику використання контейнера, де відображається назва, тип контейнера, кількість виконаних подорожей та середня фактична та об’ємна вага перевезених вантажів (див. рис. 15). Також логіст може переглянути статистику рейсу, де відображається назва, тип контейнера, загальна вага, середня швидкість та кількість витраченого часу (див. рис. 16)

4	ВИСНОВКИ

У результаті виконання лабораторної роботи, була успішно розроблено та протестована клієнтська частина програмної системи. Для кращого розуміння предметної області та архітектури системи були розроблені відповідні діаграми. Також була створена демонстраційна відеопрезентація, в якій висвітлені основні функції системи. Ви можете переглянути цей відеоролик за наступним посиланням:(DEMO: )
